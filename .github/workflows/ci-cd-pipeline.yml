name: CI/CD Pipeline for Streamlit App

on:
  push:
    branches:
      - main  # Trigger workflow when code is pushed to the main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Install dependencies from requirements.txt
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Run training script (assuming you have a training script that prepares models)
      - name: Run training script
        run: |
          echo "Running training script..."
          python model/training.py

      # Run recommendation.py (generate recommendations)
      - name: Run recommendation script
        run: |
          echo "Running recommendation script..."
          python model/recommendation.py

      # Run prediction.py (make predictions)
      - name: Run prediction script
        run: |
          echo "Running prediction script..."
          python model/prediction.py

      # (Optional) Run unit tests if needed
      # Uncomment this block if you have unit tests in your repository
      # - name: Run unit tests
      #   run: |
      #     pytest tests/

      # Upload Models to Artifact Store
      - name: Upload Models to Artifact Store
        uses: actions/upload-artifact@v3
        with:
          name: trained-models
          path: |
            models/maintenance_classifier_model.pkl
            models/remaining_life_regressor_model.pkl

      # Run Streamlit app in the background (headless mode)
      - name: Run Streamlit app
        run: |
          echo "Starting Streamlit app..."
          streamlit run streamlit_app.py --server.headless true &  # Run the app in the background
          sleep 10  # Wait for 10 seconds to let the app start
          echo "Streamlit app should have started."
          ps aux | grep streamlit  # Check if Streamlit process is running
          pkill -f streamlit  # Kill the Streamlit process after 10 seconds

      # MLflow logging test (for model logging)
      - name: MLflow logging test
        run: |
          python -c "
          from model.prediction import maintenance_model, lifespan_model
          from model.recommendation import generate_recommendation
          import mlflow
          import joblib
          import pandas as pd

          # Load the pre-trained models (assuming they are saved as .pkl files)
          maintenance_model = joblib.load('models/maintenance_classifier_model.pkl')
          lifespan_model = joblib.load('models/remaining_life_regressor_model.pkl')

          # Ensure the experiment is created or set up (if not already done)
          mlflow.set_experiment('aircraft_maintenance_experiment')

          # Log the models to MLflow
          with mlflow.start_run():
              mlflow.sklearn.log_model(maintenance_model, artifact_path="maintenance_classifier_model")
              mlflow.sklearn.log_model(lifespan_model, artifact_path="remaining_life_regressor_model")
          print('Models logged successfully.')

          # Simulate input data (you can use real data here)
          user_data = pd.DataFrame({
              'Temperature (°C)': [50],
              'Pressure (bar)': [10],
              'Vibration (mm/s)': [1],
              'Working_Hours': [1000]
          })

          # Make predictions using the models
          predicted_maintenance = maintenance_model.predict(user_data)[0]
          predicted_lifespan = lifespan_model.predict(user_data)[0]

          # Generate recommendation
          failure_type = "None" if predicted_maintenance == 0 else "Turbine Overheat"
          flight_type = "commercial"
          flight_number = 1234
          recommendation = generate_recommendation(failure_type, flight_type, flight_number, predicted_lifespan)

          # Log the prediction to MLflow
          with mlflow.start_run():
              mlflow.log_param("Temperature (°C)", user_data['Temperature (°C)'][0])
              mlflow.log_param("Pressure (bar)", user_data['Pressure (bar)'][0])
              mlflow.log_param("Vibration (mm/s)", user_data['Vibration (mm/s)'][0])
              mlflow.log_param("Working Hours", user_data['Working_Hours'][0])
              mlflow.log_param("Prediction", recommendation)

          print('Prediction logged successfully.')
          "
