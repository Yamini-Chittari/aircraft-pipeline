name: CI/CD Pipeline for Streamlit App

on:
  push:
    branches:
      - main  # Trigger workflow when code is pushed to the main branch
  pull_request:
    branches:
      - main  # Trigger workflow on pull requests targeting main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'  # Use the desired Python version

      # Install dependencies from requirements.txt
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Run unit tests (if any)
      - name: Run unit tests (if any)
        run: |
          pytest tests/  # Assuming you have a tests/ directory for your test cases

      # Run Streamlit app in headless mode, and kill after some time
      - name: Run Streamlit app
        run: |
          echo "Starting Streamlit app..."
          streamlit run streamlit_app.py --server.headless true &
          sleep 10  # Let the app run for 10 seconds
          echo "Streamlit app should have started."
          ps aux | grep streamlit
          pkill -f streamlit  # Kill the Streamlit process after 10 seconds

      # Optional: MLflow logging test (for model logging)
      - name: MLflow logging test
        run: |
          python -c "
          from mlflow_utils.mlflow_logging import log_model, log_prediction
          from sklearn.dummy import DummyClassifier
          import pandas as pd
          
          # Dummy example for logging
          model = DummyClassifier(strategy='most_frequent')
          log_model(model, 'Dummy Model')
          input_data = pd.DataFrame({'feature1': [1], 'feature2': [0]})
          log_prediction(input_data, model.predict(input_data), 'Dummy Model')
          "
